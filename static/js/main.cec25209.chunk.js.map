{"version":3,"sources":["renders/TopBar.tsx","renders/WelcomeDialog.tsx","renders/AllMovies.tsx","renders/RandomSelect.tsx","pickers/RatingSelector.tsx","pickers/ToggleGenre.tsx","pickers/ToggleMaster.tsx","MoviePicker.tsx","index.tsx"],"names":["AppTitle","styled","Typography","_templateObject","DialogContent","div","_templateObject2","TopBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","modalOpen","handleClose","state","defaultLists","lists","_this$props","editListId","listId","map","list","react","FormControlLabel","key","id","control","Radio","checked","onChange","value","label","name","AppBar","position","color","Toolbar","variant","listName","IconButton","aria-label","aria-controls","aria-haspopup","onClick","Edit_default","a","Dialog","onClose","aria-labelledby","open","DialogTitle","renderSampleLists","React","WelcomeDialog_templateObject","SmallP","p","WelcomeDialog_templateObject2","WelcomeDialog","react_default","createElement","WelcomeDialog_DialogContent","Component","ListCaptain","List","AllMovies_templateObject","movieGenres","movieGenresJson","AllMovies","movies","movie","genreIDs","genre_ids","genreNames","console","log","ListItem","alignItems","ListItemAvatar","Avatar","src","backdrop_path","ListItemText","primary","title","secondary","join","RecommendedWrapper","RandomSelect_templateObject","SuperFab","Fab","RandomSelect_templateObject2","_templateObject3","RecommendedMovie","_templateObject4","ImageContainer","_templateObject5","posterPath","RecommendedInfo","_templateObject6","SuperButton","Button","_templateObject7","RandomSelect","filteredMovies","newMovie","Math","floor","random","length","recommendedMovie","poster_path","_this$state","tmdbURL","concat","Link","href","rel","target","RandomSelect_DialogContent","release_date","overview","RatingWrapper","RatingSelector_templateObject","RatingSelector","selectedRating","setRating","Slider","defaultValue","valueLabelDisplay","_event","Array","isArray","step","marks","min","max","SuperFormGroup","FormGroup","ToggleGenre_templateObject","SuperFormControlLabel","FormControl","ToggleGenre_templateObject2","ToggleGenre_templateObject3","ToggleGenre","jones","keys","Checkbox","selectedGenres","includes","toggleGenre","component","renderFormGroup","PickerWrapper","ToggleMaster_templateObject","ToggleMaster","setGenre","genreId","newGenres","filter","g","push","updateSelections","rating","pickers_RatingSelector","pickers_ToggleGenre","CenterFlex","MoviePicker_templateObject","LoadingText","MoviePicker_templateObject2","AppContainer","MoviePicker_templateObject3","MovieListWrapper","MoviePicker_templateObject4","theme","createMuiTheme","palette","main","contrastText","typography","fontFamily","MoviePicker","_React$Component","_loadMovies","listDescription","isLoaded","seenBy","inherits","createClass","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","_loadMovies2","_callee2","totalMovies","baseURL","flexURL","resolved","response","json","_context2","process","fetch","sent","description","results","page","total_pages","t0","alert","_x","vote_average","every","genre","parseInt","_this2","MuiThemeProvider","renders_TopBar","Grid","container","item","xs","pickers_ToggleMaster","filterDaMovies","renders_AllMovies","renders_RandomSelect","renders_WelcomeDialog","CircularProgress","ReactDOM","MoviePicker_MoviePicker","document","getElementById"],"mappings":"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","file":"static/js/main.cec25209.chunk.js","sourcesContent":["import * as React from \"react\"\nimport styled from \"styled-components\"\nimport {\n  AppBar,\n  Dialog,\n  DialogTitle,\n  FormControlLabel,\n  IconButton,\n  Radio,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\"\nimport Edit from \"@material-ui/icons/Edit\"\nimport defaultLists from \"../static/defaultLists.json\"\n\nconst AppTitle = styled(Typography)`\n  flex-grow: 1;\n`\nconst DialogContent = styled.div`\n  min-width: 500px;\n  display: flex;\n  flex-direction: column;\n  padding: 0 24px 24px 24px;\n`\n\ninterface TopBarProps {\n  editListId: (listId: string) => void;\n  listId: string;\n  listName: string;\n}\n\ninterface TopBarState {\n  modalOpen: boolean;\n  defaultLists: any; //TODO: make this specific\n}\n\n\nclass TopBar extends React.Component<TopBarProps, TopBarState> {\n  constructor(props: TopBarProps) {\n    super(props)\n\n    this.state = {\n      modalOpen: false,\n      defaultLists: defaultLists.lists,\n    }\n  }\n\n  async componentDidMount() {\n    //TODO: pull default lists from accountId\n    /*const accountId = \"trpglobokar\"\n    const baseURL = `https://api.themoviedb.org/4/account/${accountId}/lists?api_key=${API_KEY}`\n    let response = await fetch(baseURL)\n    let json = await response.json()\n    console.log(\"json\", json)*/\n  }\n\n  handleClick = () => {\n    this.setState({\n      modalOpen: true,\n    })\n  }\n\n  handleClose = () => {\n    this.setState({\n      modalOpen: false,\n    })\n  }\n\n  renderSampleLists() {\n    const { editListId, listId } = this.props\n    const { defaultLists } = this.state\n\n    return defaultLists.map((list:any) => {\n      return (\n        <FormControlLabel\n          key={list.id}\n          control={\n            <Radio\n              checked={listId === list.id}\n              onChange={() => editListId(list.id)}\n              value={list.id}\n            />\n          }\n          label={list.name}\n        />\n      )\n    })\n  }\n\n  render() {\n    const { modalOpen } = this.state\n\n    return (\n      <AppBar position=\"static\" color=\"secondary\">\n        <Toolbar>\n          <AppTitle variant=\"h6\" color=\"inherit\">\n            Movie Picker\n          </AppTitle>\n          <Typography variant=\"h6\" color=\"inherit\">\n            {this.props.listName}\n          </Typography>\n          <IconButton\n            aria-label=\"EditList\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={this.handleClick}\n            color=\"inherit\"\n          >\n            <Edit />\n          </IconButton>\n        </Toolbar>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={modalOpen}\n        >\n          <DialogTitle id=\"simple-dialog-title\">Change Movie List</DialogTitle>\n          <DialogContent>{this.renderSampleLists()}</DialogContent>\n        </Dialog>\n      </AppBar>\n    )\n  }\n}\n\nexport default TopBar\n","import React, { Component } from \"react\"\nimport {\n  Dialog,\n  DialogTitle,\n} from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nconst DialogContent = styled.div`\n  padding: 0 24px 24px 24px;\n`\nconst SmallP = styled.p`\n  font-size: 10px;\n`\n\ninterface WelcomeProps {\n}\n\ninterface WelcomeState {\n  modalOpen: boolean;\n}\n\nclass WelcomeDialog extends Component<WelcomeProps, WelcomeState> {\n  constructor(props: WelcomeProps) {\n    super(props)\n\n    this.state = {\n      modalOpen: false, //modalOpen: true,\n    }\n  }\n\n  handleClose = () => {\n    this.setState({\n      modalOpen: false,\n    })\n  }\n\n  render() {\n    return (\n      <Dialog\n        onClose={this.handleClose}\n        aria-labelledby=\"simple-dialog-title2\"\n        open={this.state.modalOpen}\n      >\n        <DialogTitle id=\"simple-dialog-title2\">\n          Welcome to the Movie Picker\n        </DialogTitle>\n        <DialogContent>\n          <p>Ever sat down with a giant collection of movies you know you want to watch but no idea how to pick just one?</p>\n          <p>Are you and a friend constantly saying things like \"what do you mean you haven't watched the Princess Bride?!\", but when you're both on the couch you can barely remember one title, let alone the dozen others you've been dying to share?</p>\n          <p>If so, this tool is for you.</p>\n          <p>Load up a list of pre-selected titles and start filtering by whatever genre you might be in the mood for. If you're still stuck with indecision, use the \"Choose For Me\" button to randomly select a film from the final results.</p>\n          <SmallP>(NOTE: ability to add custom user lists coming soon)</SmallP>\n        </DialogContent>\n      </Dialog>\n    )\n  }\n}\n\nexport default WelcomeDialog\n","import React, { Component } from \"react\"\nimport {\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nimport movieGenresJson from \"../static/movieGenres.json\"\n\nconst ListCaptain = styled(List)`\n  height: 100%;\n  overflow: scroll;\n`\n\ninterface AllMoviesProps {\n  movies: {\n    id: string,\n    title: string,\n    backdrop_path: string,\n    genre_ids: string[]\n  }[]; //TODO: make movies its own interface in a utils file\n}\ninterface AllMoviesState {\n}\n\nconst movieGenres:any = movieGenresJson\n\n\nclass AllMovies extends Component<AllMoviesProps, AllMoviesState> {\n  constructor(props: AllMoviesProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <ListCaptain>\n        {this.props.movies.map(movie => {\n          const genreIDs = movie.genre_ids\n          const genreNames = genreIDs.map(id => movieGenres[id])\n          console.log(\"genreIDs\", genreIDs)\n          console.log(\"genreNames\", genreNames)\n\n          return (\n            <ListItem key={movie.id} alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar\n                  src={\n                    \"https://image.tmdb.org/t/p/w92/\" +\n                    movie.backdrop_path\n                  }\n                />\n              </ListItemAvatar>\n              <ListItemText\n                primary={movie.title}\n                secondary={genreNames.join(\", \")}\n              />\n            </ListItem>\n          )\n        })}\n      </ListCaptain>\n    )\n  }\n}\n\nexport default AllMovies\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport {\n  Button,\n  Dialog,\n  DialogTitle,\n  Fab,\n  Link,\n  Typography,\n} from \"@material-ui/core\"\nimport movieGenresJson from \"../static/movieGenres.json\"\n\nconst movieGenres:any = movieGenresJson\n\ninterface ICProps {\n  posterPath: string;\n}\n\nconst RecommendedWrapper = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n`\nconst SuperFab = styled(Fab)`\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n`\nconst DialogContent = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 0 24px 24px 24px;\n`\nconst RecommendedMovie = styled.div`\n  display: flex;\n  margin-bottom: 8px;\n`\nconst ImageContainer = styled.div<ICProps>`\n  height: 300px;\n  width: 220px;\n  background-image: url(https://image.tmdb.org/t/p/w370_and_h556_bestv2${props => props.posterPath});\n  background-position: top;\n  background-repeat: no-repeat;\n  background-size: contain;\n  margin-right: 16px;\n`\nconst RecommendedInfo = styled.div`\n  width: 75%;\n`\nconst SuperButton = styled(Button)`\n  margin: 8px;\n`\n\ninterface RSProps {\n  filteredMovies: any[];\n}\n\ninterface RSState {\n  recommendedMovie: { //TODO: make of type Movie\n    id: string,\n    title: string,\n    backdrop_path: string,\n    poster_path: string,\n    release_date?: string,\n    overview?: string,\n    genre_ids: string[]\n  };\n  modalOpen: boolean;\n}\n\nclass RandomSelect extends Component<RSProps, RSState> {\n  constructor(props: RSProps) {\n    super(props)\n\n    this.state = {\n      recommendedMovie: {\n        id: \"\",\n        title: \"\",\n        poster_path: \"\",\n        backdrop_path: \"\",\n        genre_ids: [],\n      },\n      modalOpen: false,\n    }\n  }\n\n  handleClick = () => {\n    let movies = this.props.filteredMovies\n\n    const newMovie =\n      movies[Math.floor(Math.random() * Math.floor(movies.length))]\n\n    this.setState({\n      recommendedMovie: newMovie,\n      modalOpen: true,\n    })\n  }\n\n  handleClose = () => {\n    this.setState({\n      recommendedMovie: {\n        id: \"\",\n        title: \"\",\n        poster_path: \"\",\n        backdrop_path: \"\",\n        genre_ids: [],\n      },\n      modalOpen: false,\n    })\n  }\n\n  render() {\n    const { modalOpen, recommendedMovie } = this.state\n    const tmdbURL = `https://www.themoviedb.org/movie/${recommendedMovie.id}`\n    const genreNames = recommendedMovie.genre_ids\n      .map(id => movieGenres[id])\n      .join(\", \")\n    console.log(\"recommendedMovie\", recommendedMovie)\n\n    return (\n      <RecommendedWrapper>\n        <SuperFab\n          color=\"primary\"\n          variant=\"extended\"\n          aria-label=\"Choose for Me\"\n          onClick={this.handleClick}\n        >\n          Choose for Me\n        </SuperFab>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={modalOpen}\n        >\n          <DialogTitle id=\"simple-dialog-title\">\n            Recommended Movie:{\" \"}\n            <Link href={tmdbURL} rel=\"noopener noreferrer\" target=\"_blank\">\n              {recommendedMovie.title}\n            </Link>\n          </DialogTitle>\n          <DialogContent>\n            <RecommendedMovie>\n              <ImageContainer posterPath={recommendedMovie.poster_path} />\n              <RecommendedInfo>\n                <Typography>\n                  <b>Release Date:</b> {recommendedMovie.release_date}\n                </Typography>\n                <Typography>\n                  <b>Genres:</b> {genreNames}\n                </Typography>\n                <Typography>\n                  <b>Description:</b> {recommendedMovie.overview}\n                </Typography>\n              </RecommendedInfo>\n            </RecommendedMovie>\n            <SuperButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClick}\n            >\n              Give me another\n            </SuperButton>\n          </DialogContent>\n        </Dialog>\n      </RecommendedWrapper>\n    )\n  }\n}\n\nexport default RandomSelect\n","import React, { Component } from \"react\"\nimport { Slider, Typography } from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nconst RatingWrapper = styled.div`\n  margin-bottom: 32px;\n`\n\ninterface RSProps {\n  selectedRating: number;\n  setRating: (rating: number) => void;\n}\n\nclass RatingSelector extends Component<RSProps> {\n  //TODO: figure out how to make range; possible custom component? IDEK\n  render() {\n    const { selectedRating, setRating } = this.props\n    return (\n      <RatingWrapper>\n        <Typography variant=\"h6\">\n          Minimum Rating: {selectedRating}/10\n        </Typography>\n        <br />\n        <Slider\n          defaultValue={selectedRating}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          onChange={(_event, value) => {\n            if (Array.isArray(value)) {\n              setRating(value[0])\n            } else {\n              setRating(value)\n            }\n          }}\n          step={0.5}\n          marks\n          min={1}\n          max={10}\n        />\n      </RatingWrapper>\n    )\n  }\n}\n\nexport default RatingSelector\n","import React, { Component } from 'react'\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Typography } from '@material-ui/core'\n\nimport movieGenresJson from '../static/movieGenres.json';\n\nimport styled from \"styled-components\"\n\nconst SuperFormGroup = styled(FormGroup)`\n  flex-direction: row!important;\n`\nconst SuperFormControl = styled(FormControl)`\n  width: 100%;\n`\nconst SuperFormControlLabel = styled(FormControlLabel)`\n  min-width: 160px;\n`\n\ninterface TGProps {\n  selectedGenres: string[];\n  toggleGenre: (genreId: string) => void;\n}\n\nconst movieGenres:any = movieGenresJson\n\nclass ToggleGenre extends Component<TGProps> {\n  constructor(props: TGProps) {\n    super(props);\n  }\n\n  renderFormGroup() {\n    //TODONEXT: adapt this from obj to array\n    const jones = Object.keys(movieGenres).map((id: string) => {\n      return (\n        <SuperFormControlLabel\n          key={id}\n          control={\n            <Checkbox\n              checked={this.props.selectedGenres.includes(id)}\n              onChange={() => { this.props.toggleGenre(id) }}\n              value={id}\n\n            />\n          }\n          label={movieGenres[id]}\n        />\n      )\n    })\n\n    return (\n      <SuperFormGroup>\n        {jones}\n      </SuperFormGroup>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <FormControl component=\"fieldset\">\n          <Typography variant=\"h6\">Genres</Typography>\n          {this.renderFormGroup()}\n        </FormControl>\n      </div>\n    )\n  }\n}\n\nexport default ToggleGenre\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\n\nimport RatingSelector from \"./RatingSelector\"\nimport ToggleGenre from \"./ToggleGenre\"\n\nconst PickerWrapper = styled.div`\n  height: calc(100vh - 96px);\n  overflow: scroll;\n  background-color: white;\n  box-shadow: 0px 0px 20px #00000057;\n  padding: 16px;\n`\n\ninterface TMProps {\n  selectedRating: number;\n  selectedGenres: string[];\n  updateSelections: (selectedGenres: string[], selectedRating: number) => void;\n}\n\nclass ToggleMaster extends Component<TMProps> {\n  constructor(props: TMProps) {\n    super(props)\n  }\n\n  setGenre = (genreId: string) => {\n    let newGenres = this.props.selectedGenres\n\n    if (newGenres.includes(genreId)) {\n      newGenres = newGenres.filter(g => g !== genreId)\n    } else {\n      newGenres.push(genreId)\n    }\n\n    this.props.updateSelections(\n      newGenres,\n      this.props.selectedRating\n    )\n  }\n\n  setRating = (rating: number) => {\n    this.props.updateSelections(\n      this.props.selectedGenres,\n      rating\n    )\n  }\n\n  render() {\n    return (\n      <PickerWrapper>\n        <RatingSelector\n          selectedRating={this.props.selectedRating}\n          setRating={this.setRating}\n        />\n        <ToggleGenre\n          selectedGenres={this.props.selectedGenres}\n          toggleGenre={this.setGenre}\n        />\n      </PickerWrapper>\n    )\n  }\n}\n\nexport default ToggleMaster\n","import * as React from \"react\";\nimport {\n  CircularProgress,\n  Grid,\n  Typography,\n} from \"@material-ui/core\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport styled from \"styled-components\"\n\nimport TopBar from \"./renders/TopBar\"\nimport WelcomeDialog from \"./renders/WelcomeDialog\"\nimport AllMovies from \"./renders/AllMovies\"\nimport RandomSelect from \"./renders/RandomSelect\"\nimport ToggleMaster from \"./pickers/ToggleMaster\"\n\nimport \"./static/fonts.css\"\n\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY\n\nconst CenterFlex = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst LoadingText = styled(Typography)`\n  margin-right: 16px !important;\n`\nconst AppContainer = styled.div`\n  height: 100%;\n`\nconst MovieListWrapper = styled.div`\n  margin: 16px 32px 0 32px;\n  max-height: calc(100vh - 96px);\n  overflow: scroll;\n`\n\ninterface MPState {\n  playOrPause?: string;\n  listId: string;\n  listName: string;\n  listDescription: string;\n  isLoaded: boolean;\n  recommendedMovie: string;\n  seenBy: string[];\n  selectedGenres: any[]; //TODO: figure out what type this is\n  selectedRating: number;\n  movies: any[];\n  filteredMovies: any[];\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#23B5D3\", contrastText: \"#FBFBFB\" },\n    secondary: { main: \"#071013\", contrastText: \"#FBFBFB\" },\n  },\n  typography: {\n    fontFamily: [\n      \"Khand\",\n      \"Raleway\",\n      \"typeface-roboto\",\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n  },\n})\n\n// 'HelloProps' describes the shape of props.\n// State is never set so we use the '{}' type.\nexport class MoviePicker extends React.Component<{}, MPState> {\n  constructor(props:{}) {\n    super(props);\n    \n    this.state = {\n      listId: \"108073\",\n      listName: \"\",\n      listDescription: \"\",\n      isLoaded: true,\n      recommendedMovie: \"\",\n      seenBy: [\"Jake\", \"Rocky\"],\n      selectedGenres: [],\n      selectedRating: 1,\n      movies: [],\n      filteredMovies: [],\n    };\n  }\n\n  async componentDidMount() {\n    const { listId } = this.state\n    this._loadMovies(listId)\n  }\n\n  //TODO: move this to a utils file\n  async _loadMovies(listId: string) {\n    let totalMovies: any[] = []\n    const baseURL: string = `https://api.themoviedb.org/4/list/${listId}?api_key=${TMDB_API_KEY}&language=en-US`\n    let flexURL: string = baseURL\n    let resolved: boolean = false\n    let listDescription: string = \"\"\n    let listName: string = \"\"\n\n    try {\n      while (!resolved) {\n        let response = await fetch(flexURL)\n        let json = await response.json()\n        listDescription = json.description\n        listName = json.name\n        totalMovies = totalMovies.concat(json.results)\n        if (json.page < json.total_pages) {\n          flexURL = `${baseURL}&page=${json.page + 1}`\n        } else {\n          resolved = true\n        }\n      }\n    } catch (err) {\n      alert(err) // TypeError: failed to fetch\n    }\n\n    this.setState({\n      isLoaded: true,\n      listDescription,\n      listId,\n      listName,\n      movies: totalMovies,\n      filteredMovies: totalMovies, //TODO: filter this as well\n    })\n  }\n\n  editListId = (listId: string) => {\n    //this.setState({ listId })\n    this._loadMovies(listId)\n  }\n\n  filterDaMovies(selectedGenres: any[], selectedRating: number) {\n    const movies = this.state.movies\n      .filter(movie => movie.vote_average > selectedRating)\n      .filter(movie =>\n        selectedGenres.every(genre => movie.genre_ids.includes(parseInt(genre)))\n      )\n    return movies\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return ( //TODO: break this into its own component\n        <MuiThemeProvider theme={theme}>\n          <CenterFlex>\n            <LoadingText>Loading...</LoadingText>\n            <CircularProgress />\n          </CenterFlex>\n        </MuiThemeProvider>\n      )\n    }\n    return (\n      <MuiThemeProvider theme={theme}>\n        <AppContainer>\n          <TopBar\n            editListId={this.editListId}\n            listId={this.state.listId}\n            listName={this.state.listName}\n          />\n          <Grid container>\n            <Grid item xs={4}>\n              <ToggleMaster\n                selectedRating={this.state.selectedRating}\n                selectedGenres={this.state.selectedGenres}\n                updateSelections={(selectedGenres:any[], selectedRating:number) => {\n                  const filteredMovies = this.filterDaMovies(\n                    selectedGenres,\n                    selectedRating\n                  )\n                  this.setState({\n                    selectedGenres,\n                    selectedRating,\n                    filteredMovies,\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={8}>\n              <MovieListWrapper>\n                <AllMovies movies={this.state.filteredMovies} />\n              </MovieListWrapper>\n            </Grid>\n          </Grid>\n          <RandomSelect filteredMovies={this.state.filteredMovies} />\n          <WelcomeDialog />\n        </AppContainer>\n      </MuiThemeProvider>\n    )\n  }\n\n}","import * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\nimport \"./static/index.css\"\n//import * as serviceWorker from \"./serviceWorker\"\n\nimport { MoviePicker } from \"./MoviePicker\";\n\nReactDOM.render(\n    <MoviePicker />,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister()\n"],"sourceRoot":""}