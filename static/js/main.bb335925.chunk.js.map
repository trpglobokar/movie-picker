{"version":3,"sources":["pickers/ratingSelector.js","pickers/toggleGenre.js","pickers/toggleMaster.js","renders/allmovies.js","renders/randomSelect.js","moviepicker.js","serviceWorker.js","index.js"],"names":["RatingWrapper","styled","div","_templateObject","RatingSelector","_this$props","this","props","selectedRating","setRating","react_default","a","createElement","Typography","variant","Slider","defaultValue","aria-labelledby","valueLabelDisplay","onChange","_event","value","step","marks","min","max","Component","SuperFormGroup","FormGroup","toggleGenre_templateObject","SuperFormControl","FormControl","_templateObject2","SuperFormControlLabel","FormControlLabel","_templateObject3","ToggleGenre","_this","jones","movieGenres","genres","map","peep","key","id","control","Checkbox","checked","selectedGenres","includes","toString","toggleGenre","label","name","console","log","component","renderFormGroup","PickerWrapper","toggleMaster_templateObject","App","setGenre","event","toggleBy","currentTarget","newGenres","filter","g","push","updateSelections","newRating","ratingSelector","ListCaptain","List","allmovies_templateObject","AllMovies","movies","movie","genreNames","genre_ids","find","genre","ListItem","alignItems","ListItemAvatar","Avatar","src","backdrop_path","ListItemText","primary","title","secondary","join","RecommendedWrapper","randomSelect_templateObject","RecommendedContent","randomSelect_templateObject2","SuperFab","Fab","randomSelect_templateObject3","ImageContainer","_templateObject4","posterPath","SuperButton","Button","_templateObject5","RandomSelect","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","filteredMovies","newMovie","Math","floor","random","length","setState","recommendedMovie","modalOpen","handleClose","state","_this$state","color","aria-label","onClick","Dialog","onClose","open","DialogTitle","poster_path","theme","createMuiTheme","palette","main","contrastText","typography","fontFamily","useNextVariants","AppContainer","moviepicker_templateObject","CenterFlex","moviepicker_templateObject2","LoadingText","moviepicker_templateObject3","MovieListWrapper","moviepicker_templateObject4","MoviePicker","isLoaded","seenBy","totalMovies","flexURL","baseURL","resolved","fetch","response","json","concat","results","page","total_pages","alert","_context","t0","vote_average","every","parseInt","_this2","MuiThemeProvider","AppBar","position","Toolbar","Grid","container","item","xs","toggleMaster","filterDaMovies","allmovies","randomSelect","CircularProgress","React","Boolean","window","location","hostname","match","ReactDOM","render","moviepicker","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i8BAIA,IAAMA,EAAgBC,IAAOC,IAAVC,KA+BJC,mLAzBJ,IAAAC,EAC+BC,KAAKC,MAAnCC,EADDH,EACCG,eAAgBC,EADjBJ,EACiBI,UACxB,OACEC,EAAAC,EAAAC,cAACZ,EAAD,KACEU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBACmBN,EADnB,OAGAE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,aAAcR,EACdS,kBAAgB,kBAChBC,kBAAkB,OAClBC,SAAU,SAACC,EAAQC,GACjBZ,EAAUY,IAEZC,KAAM,GACNC,OAAK,EACLC,IAAK,EACLC,IAAK,aApBcC,qVCG7B,IAAMC,EAAiB1B,YAAO2B,IAAP3B,CAAH4B,KAGdC,EAAmB7B,YAAO8B,IAAP9B,CAAH+B,KAGhBC,EAAwBhC,YAAOiC,IAAPjC,CAAHkC,KA6CZC,4LAvCI,IAAAC,EAAA/B,KAETgC,EADgBC,EAAYC,OACNC,IAAI,SAAAC,GAC9B,OACEhC,EAAAC,EAAAC,cAACqB,EAAD,CACEU,IAAKD,EAAKE,GACVC,QACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CACEC,QAASV,EAAK9B,MAAMyC,eAAeC,SAASP,EAAKE,GAAGM,YACpD/B,SAAUkB,EAAK9B,MAAM4C,YACrB9B,MAAOqB,EAAKE,GAAGM,aAInBE,MAAOV,EAAKW,SAKlB,OACE3C,EAAAC,EAAAC,cAACe,EAAD,KACGW,oCAOL,OADAgB,QAAQC,IAAI,aAAcjD,KAAKC,OAE7BG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,CAAkB0B,UAAU,YAC1B9C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,UACCR,KAAKmD,2BAlCU/B,6NCf1B,IAAMgC,EAAgBzD,IAAOC,IAAVyD,KA0EJC,6MA3CbC,SAAW,SAAAC,GACT,IAAMC,EAAWD,EAAME,cAAc3C,MAEjC4C,EAAY5B,EAAK9B,MAAMyC,eACvBiB,EAAUhB,SAASc,GACrBE,EAAYA,EAAUC,OAAO,SAAAC,GAAC,OAAIA,IAAMJ,IAExCE,EAAUG,KAAKL,GAGjB1B,EAAK9B,MAAM8D,iBACTJ,EACA5B,EAAK9B,MAAMC,mBAIfC,UAAY,SAAA6D,GACVjC,EAAK9B,MAAM8D,iBACThC,EAAK9B,MAAMyC,eACXsB,yHAKF,OACE5D,EAAAC,EAAAC,cAAC8C,EAAD,KAKEhD,EAAAC,EAAAC,cAAC2D,EAAD,CACE/D,eAAgBF,KAAKC,MAAMC,eAC3BC,UAAWH,KAAKG,YAElBC,EAAAC,EAAAC,cAACuC,EAAD,CACEH,eAAgB1C,KAAKC,MAAMyC,eAC3BG,YAAa7C,KAAKuD,mBA3DVnC,uKCJlB,IAAM8C,EAAcvE,YAAOwE,IAAPxE,CAAHyE,KA8BFC,mLAvBX,OACEjE,EAAAC,EAAAC,cAAC4D,EAAD,KACGlE,KAAKC,MAAMqE,OAAOnC,IAAI,SAAAoC,GACrB,IACMC,EADWD,EAAME,UACKtC,IAAI,SAAAG,GAAE,OAAIL,EAAYC,OAAOwC,KAAK,SAAAC,GAAK,OAAIA,EAAMrC,KAAOA,IAAIS,OAExF,OACE3C,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAUvC,IAAKkC,EAAMjC,GAAIuC,WAAW,cAClCzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAQC,IAAK,kDAAoDT,EAAMU,iBAEzE7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CACEC,QAASZ,EAAMa,MACfC,UAAWb,EAAWc,KAAK,mBAfnBlE,i4BCXxB,IAAMmE,GAAqB5F,IAAOC,IAAV4F,MAKlBC,GAAqB9F,IAAOC,IAAV8F,MAQlBC,GAAWhG,YAAOiG,IAAPjG,CAAHkG,MAKRC,GAAiBnG,IAAOC,IAAVmG,KAGqD,SAAA9F,GAAK,OAAIA,EAAM+F,aAMlFC,GAActG,YAAOuG,IAAPvG,CAAHwG,MAsEFC,eAjEb,SAAAA,EAAYnG,GAAO,IAAA8B,EAAA,OAAAsE,OAAAC,EAAA,EAAAD,CAAArG,KAAAoG,IACjBrE,EAAAsE,OAAAE,EAAA,EAAAF,CAAArG,KAAAqG,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAzG,KAAMC,KAQRyG,YAAc,SAAA5F,GACZ,IAAIwD,EAASvC,EAAK9B,MAAM0G,eAElBC,EACJtC,EAAOuC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMxC,EAAO0C,UAEtDjF,EAAKkF,SAAS,CACZC,iBAAkBN,EAClBO,WAAW,KAjBIpF,EAqBnBqF,YAAc,SAAAtG,GACZiB,EAAKkF,SAAS,CACZC,iBAAkB,GAClBC,WAAW,KArBbpF,EAAKsF,MAAQ,CACXH,iBAAkB,GAClBC,WAAW,GALIpF,wEA4BV,IAAAuF,EACiCtH,KAAKqH,MAArCF,EADDG,EACCH,UAAWD,EADZI,EACYJ,iBAEnB,OACE9G,EAAAC,EAAAC,cAACiF,GAAD,KACEnF,EAAAC,EAAAC,cAACqF,GAAD,CACE4B,MAAM,UACN/G,QAAQ,WACRgH,aAAW,gBACXC,QAASzH,KAAK0G,aAJhB,iBAQAtG,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CACEC,QAAS3H,KAAKoH,YACdzG,kBAAgB,sBAChBiH,KAAMT,GAEN/G,EAAAC,EAAAC,cAACuH,GAAA,EAAD,CAAavF,GAAG,uBAAhB,sBACsB4E,EAAiB9B,OAEvChF,EAAAC,EAAAC,cAACmF,GAAD,KACErF,EAAAC,EAAAC,cAACwF,GAAD,CAAgBE,WAAYkB,EAAiBY,cAC7C1H,EAAAC,EAAAC,cAAC2F,GAAD,CACEzF,QAAQ,YACR+G,MAAM,UACNE,QAASzH,KAAK0G,aAHhB,6BApDetF,qiBCxB3B,IAAM2G,GAAQC,YAAe,CAC3BC,QAAS,CACP9C,QAAS,CAAE+C,KAAM,UAAWC,aAAc,WAC1C9C,UAAW,CAAE6C,KAAM,UAAWC,aAAc,YAE9CC,WAAY,CACVC,WAAY,CACV,QACA,UACA,kBACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACA/C,KAAK,KACPgD,iBAAiB,KAIfC,GAAe5I,IAAOC,IAAV4I,MAGZC,GAAa9I,IAAOC,IAAV8I,MAOVC,GAAchJ,YAAOY,IAAPZ,CAAHiJ,MAGXC,GAAmBlJ,IAAOC,IAAVkJ,MAgHPC,eAzGb,SAAAA,EAAY9I,GAAO,IAAA8B,EAAA,OAAAsE,OAAAC,EAAA,EAAAD,CAAArG,KAAA+I,IACjBhH,EAAAsE,OAAAE,EAAA,EAAAF,CAAArG,KAAAqG,OAAAG,EAAA,EAAAH,CAAA0C,GAAAtC,KAAAzG,KAAMC,KAEDoH,MAAQ,CACX2B,UAAU,EACV9B,iBAAkB,GAClB+B,OAAQ,CAAC,OAAQ,SACjBvG,eAAgB,GAChBxC,eAAgB,EAChBoE,OAAQ,GACRqC,eAAgB,IAVD5E,2MAebmH,EAAc,GAGdC,EAFEC,EACJ,mGAEEC,GAAW,qBAGLA,mCACeC,MAAMH,iBAAvBI,mBACaA,EAASC,eAAtBA,SACJN,EAAcA,EAAYO,OAAOD,EAAKE,SAClCF,EAAKG,KAAOH,EAAKI,YACnBT,EAAO,GAAAM,OAAML,EAAN,UAAAK,OAAsBD,EAAKG,KAAO,GAEzCN,GAAW,2EAIfQ,MAAKC,EAAAC,YAGP/J,KAAKiH,SAAS,CACZ+B,UAAU,EACV1E,OAAQ4E,EACRvC,eAAgBuC,uJAILxG,EAAgBxC,GAM7B,OALeF,KAAKqH,MAAM/C,OACvBV,OAAO,SAAAW,GAAK,OAAIA,EAAMyF,aAAe9J,IACrC0D,OAAO,SAAAW,GAAK,OACX7B,EAAeuH,MAAM,SAAAtF,GAAK,OAAIJ,EAAME,UAAU9B,SAASuH,SAASvF,yCAK7D,IAAAwF,EAAAnK,KACP,OAAKA,KAAKqH,MAAM2B,SAYd5I,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,CAAkBrC,MAAOA,IACvB3H,EAAAC,EAAAC,cAACiI,GAAD,KACEnI,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAQC,SAAS,SAAS/C,MAAM,aAC9BnH,EAAAC,EAAAC,cAACiK,EAAA,EAAD,KACEnK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK+G,MAAM,WAA/B,gBAKJnH,EAAAC,EAAAC,cAACkK,EAAA,EAAD,CAAMC,WAAS,GACbrK,EAAAC,EAAAC,cAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACbvK,EAAAC,EAAAC,cAACsK,EAAD,CACE1K,eAAgBF,KAAKqH,MAAMnH,eAC3BwC,eAAgB1C,KAAKqH,MAAM3E,eAC3BqB,iBAAkB,SAACrB,EAAgBxC,GACjC,IAAMyG,EAAiBwD,EAAKU,eAC1BnI,EACAxC,GAEFiK,EAAKlD,SAAS,CACZvE,iBACAxC,iBACAyG,uBAKRvG,EAAAC,EAAAC,cAACkK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACbvK,EAAAC,EAAAC,cAACuI,GAAD,KACEzI,EAAAC,EAAAC,cAACwK,EAAD,CAAWxG,OAAQtE,KAAKqH,MAAMV,oBAIpCvG,EAAAC,EAAAC,cAACyK,GAAD,CAAcpE,eAAgB3G,KAAKqH,MAAMV,mBA3C3CvG,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,CAAkBrC,MAAOA,IACvB3H,EAAAC,EAAAC,cAACmI,GAAD,KACErI,EAAAC,EAAAC,cAACqI,GAAD,mBACAvI,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,eA3DcC,IAAM7J,WCxCZ8J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpL,EAAAC,EAAAC,cAACmL,GAAD,MAAiBC,SAASC,eAAe,SD2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb335925.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { Slider, Typography } from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nconst RatingWrapper = styled.div`\n  margin-bottom: 32px;\n`\n\nclass RatingSelector extends Component {\n  //TODO: figure out how to make range; possible custom component? IDEK\n  render() {\n    const { selectedRating, setRating } = this.props\n    return (\n      <RatingWrapper>\n        <Typography variant=\"h6\">\n          Minimum Rating: {selectedRating}/10\n        </Typography>\n        <br />\n        <Slider\n          defaultValue={selectedRating}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          onChange={(_event, value) => {\n            setRating(value)\n          }}\n          step={0.5}\n          marks\n          min={1}\n          max={10}\n        />\n      </RatingWrapper>\n    )\n  }\n}\n\nexport default RatingSelector\n","import React, { Component } from 'react'\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Typography } from '@material-ui/core'\n\nimport movieGenres from '../static/movieGenres.json';\n\nimport styled from \"styled-components\"\n\nconst SuperFormGroup = styled(FormGroup)`\n  flex-direction: row!important;\n`\nconst SuperFormControl = styled(FormControl)`\n  width: 100%;\n`\nconst SuperFormControlLabel = styled(FormControlLabel)`\n  min-width: 160px;\n`\n\nclass ToggleGenre extends Component {\n\n  renderFormGroup(){\n    const peepsInvolved = movieGenres.genres\n    const jones = peepsInvolved.map(peep => {\n      return (\n        <SuperFormControlLabel\n          key={peep.id}\n          control={\n            <Checkbox\n              checked={this.props.selectedGenres.includes(peep.id.toString())}\n              onChange={this.props.toggleGenre}\n              value={peep.id.toString()}\n\n            />\n          }\n          label={peep.name}\n        />\n      )\n    })\n\n    return (\n      <SuperFormGroup>\n        {jones}\n      </SuperFormGroup>\n    )\n  }\n\n  render() {\n    console.log(\"this.props\", this.props)\n    return (\n      <div>\n        <SuperFormControl component=\"fieldset\">\n          <Typography variant=\"h6\">Genres</Typography>\n          {this.renderFormGroup()}\n        </SuperFormControl>\n      </div>\n    )\n  }\n}\n\nexport default ToggleGenre\n","import React, { Component } from \"react\"\nimport RatingSelector from \"./ratingSelector\"\n//import ToggleSeenBy from \"./pickers/toggleSeenBy\"\nimport ToggleGenre from \"./toggleGenre\"\nimport styled from \"styled-components\"\n\nconst PickerWrapper = styled.div`\n  height: calc(100vh - 96px);\n  overflow: scroll;\n  background-color: white;\n  box-shadow: 0px 0px 20px #00000057;\n  padding: 16px;\n`\n\nclass App extends Component {\n\n  componentDidMount() {\n  }\n\n  /*toggleSeenBy = event => {\n    const toggleBy = event.currentTarget.value\n\n    let currentSeenBy = this.state.seenBy\n\n    if (currentSeenBy.includes(toggleBy)) {\n      currentSeenBy = currentSeenBy.filter(csb => csb !== toggleBy)\n    } else {\n      currentSeenBy.push(toggleBy)\n    }\n\n    let filteredMovies = this.state.movies.filter(movie =>\n      currentSeenBy.includes(movie.seenBy)\n    )\n\n    this.setState({ seenBy: currentSeenBy, filteredMovies: filteredMovies })\n  }*/\n\n  setGenre = event => {\n    const toggleBy = event.currentTarget.value\n\n    let newGenres = this.props.selectedGenres\n    if (newGenres.includes(toggleBy)) {\n      newGenres = newGenres.filter(g => g !== toggleBy)\n    } else {\n      newGenres.push(toggleBy)\n    }\n\n    this.props.updateSelections(\n      newGenres,\n      this.props.selectedRating\n    )\n  }\n\n  setRating = newRating => {\n    this.props.updateSelections(\n      this.props.selectedGenres,\n      newRating\n    )\n  }\n\n  render() {\n    return (\n      <PickerWrapper>\n        {/*<ToggleSeenBy\n          seenBy={this.state.seenBy}\n          toggleSeenBy={this.toggleSeenBy}\n        />*/}\n        <RatingSelector\n          selectedRating={this.props.selectedRating}\n          setRating={this.setRating}\n        />\n        <ToggleGenre\n          selectedGenres={this.props.selectedGenres}\n          toggleGenre={this.setGenre}\n          />\n      </PickerWrapper>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport styled from 'styled-components'\n\nimport movieGenres from '../static/movieGenres.json';\n\nconst ListCaptain = styled(List)`\n  height: 100%;\n  overflow: scroll;\n`\n\nclass AllMovies extends Component {\n  render() {\n    return (\n      <ListCaptain>\n        {this.props.movies.map(movie => {\n          const genreIDs = movie.genre_ids\n          const genreNames = genreIDs.map(id => movieGenres.genres.find(genre => genre.id === id).name)\n\n          return (\n            <ListItem key={movie.id} alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar src={\"https://image.tmdb.org/t/p/w370_and_h556_bestv2\" + movie.backdrop_path} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={movie.title}\n                secondary={genreNames.join(\", \")}\n              />\n            </ListItem>\n          )\n        })}\n      </ListCaptain>\n    )\n  }\n}\n\nexport default AllMovies\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport { Button, Dialog, DialogTitle, Fab } from '@material-ui/core'\n\nconst RecommendedWrapper = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n`\nconst RecommendedContent = styled.div`\n  min-width: 500px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 8px;\n  padding-bottom: 24px;\n`\nconst SuperFab = styled(Fab)`\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n`\nconst ImageContainer = styled.div`\n  height: 300px;\n  width: 320px;\n  background-image: url(https://image.tmdb.org/t/p/w370_and_h556_bestv2${props => props.posterPath});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: contain;\n  margin-bottom: 15px;\n`\nconst SuperButton = styled(Button)`\n  margin: 8px;\n`\n\nclass RandomSelect extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recommendedMovie: \"\",\n      modalOpen: false\n    }\n  }\n\n  handleClick = _event => {\n    let movies = this.props.filteredMovies\n\n    const newMovie =\n      movies[Math.floor(Math.random() * Math.floor(movies.length))]\n\n    this.setState({\n      recommendedMovie: newMovie,\n      modalOpen: true\n    })\n  }\n\n  handleClose = _event => {\n    this.setState({\n      recommendedMovie: \"\",\n      modalOpen: false\n    })\n  }\n\n  render() {\n    const { modalOpen, recommendedMovie } = this.state\n\n    return (\n      <RecommendedWrapper>\n        <SuperFab\n          color=\"primary\"\n          variant=\"extended\"\n          aria-label=\"Choose for Me\"\n          onClick={this.handleClick}\n        >\n          Choose for Me\n        </SuperFab>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={modalOpen}\n        >\n          <DialogTitle id=\"simple-dialog-title\">\n            Recommended Movie: {recommendedMovie.title}\n          </DialogTitle>\n          <RecommendedContent>\n            <ImageContainer posterPath={recommendedMovie.poster_path} />\n            <SuperButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClick}\n            >\n              Give me another\n            </SuperButton>\n          </RecommendedContent>\n        </Dialog>\n      </RecommendedWrapper>\n    )\n  }\n}\n\nexport default RandomSelect\n","import React from \"react\"\nimport { AppBar, CircularProgress, Grid, Toolbar, Typography } from \"@material-ui/core\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport styled from \"styled-components\"\n\nimport ToggleMaster from \"./pickers/toggleMaster\"\nimport AllMovies from \"./renders/allmovies\"\nimport RandomSelect from \"./renders/randomSelect\"\n\nimport \"./static/fonts.css\"\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#23B5D3\", contrastText: \"#FBFBFB\" }, // Purple and green play nicely together.\n    secondary: { main: \"#071013\", contrastText: \"#FBFBFB\" } // This is just green.A700 as hex.\n  },\n  typography: {\n    fontFamily: [\n      \"Khand\",\n      \"Raleway\",\n      \"typeface-roboto\",\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"'\n    ].join(\",\"),\n    useNextVariants: true\n  }\n})\n\nconst AppContainer = styled.div`\n  height: 100%;\n`\nconst CenterFlex = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst LoadingText = styled(Typography)`\n  margin-right: 16px!important;\n`\nconst MovieListWrapper = styled.div`\n  margin: 16px 32px 0 32px;\n  max-height: calc(100vh - 96px);\n  overflow: scroll;\n`\n\nclass MoviePicker extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoaded: false,\n      recommendedMovie: \"\",\n      seenBy: [\"Jake\", \"Rocky\"],\n      selectedGenres: [],\n      selectedRating: 1,\n      movies: [],\n      filteredMovies: []\n    }\n  }\n\n  async componentDidMount() {\n    let totalMovies = []\n    const baseURL =\n      \"https://api.themoviedb.org/4/list/108073?api_key=43a2c46891bb2b3bb8fccd7b04ce1f02&language=en-US\"\n    let flexURL = baseURL\n    let resolved = false\n\n    try {\n      while (!resolved) {\n        let response = await fetch(flexURL)\n        let json = await response.json()\n        totalMovies = totalMovies.concat(json.results)\n        if (json.page < json.total_pages) {\n          flexURL = `${baseURL}&page=${json.page + 1}`\n        } else {\n          resolved = true\n        }\n      }\n    } catch(err) {\n      alert(err); // TypeError: failed to fetch\n    }\n\n    this.setState({\n      isLoaded: true,\n      movies: totalMovies,\n      filteredMovies: totalMovies\n    })\n  }\n\n  filterDaMovies(selectedGenres, selectedRating) {\n    const movies = this.state.movies\n      .filter(movie => movie.vote_average > selectedRating)\n      .filter(movie =>\n        selectedGenres.every(genre => movie.genre_ids.includes(parseInt(genre)))\n      )\n    return movies\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <MuiThemeProvider theme={theme}>\n          <CenterFlex>\n            <LoadingText>Loading...</LoadingText>\n            <CircularProgress />\n          </CenterFlex>\n        </MuiThemeProvider>\n      )\n    }\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <AppContainer>\n          <AppBar position=\"static\" color=\"secondary\">\n            <Toolbar>\n              <Typography variant=\"h6\" color=\"inherit\">\n                Movie List\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <Grid container>\n            <Grid item xs={4}>\n              <ToggleMaster\n                selectedRating={this.state.selectedRating}\n                selectedGenres={this.state.selectedGenres}\n                updateSelections={(selectedGenres, selectedRating) => {\n                  const filteredMovies = this.filterDaMovies(\n                    selectedGenres,\n                    selectedRating\n                  )\n                  this.setState({\n                    selectedGenres,\n                    selectedRating,\n                    filteredMovies\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={8}>\n              <MovieListWrapper>\n                <AllMovies movies={this.state.filteredMovies} />\n              </MovieListWrapper>\n            </Grid>\n          </Grid>\n          <RandomSelect filteredMovies={this.state.filteredMovies} />\n        </AppContainer>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default MoviePicker\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport MoviePicker from './moviepicker';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MoviePicker />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}