{"version":3,"sources":["renders/topBar.js","pickers/ratingSelector.js","pickers/toggleGenre.js","pickers/toggleMaster.js","renders/allmovies.js","renders/randomSelect.js","moviepicker.js","serviceWorker.js","index.js"],"names":["defaultLists","id","name","AppTitle","styled","Typography","_templateObject","DialogContent","div","_templateObject2","TopBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_event","setState","modalOpen","handleClose","state","_this$props","editListId","listId","map","list","react_default","a","createElement","FormControlLabel","key","control","Radio","checked","onChange","value","label","AppBar","position","color","Toolbar","variant","listName","IconButton","aria-label","aria-controls","aria-haspopup","onClick","Edit_default","Dialog","onClose","aria-labelledby","open","DialogTitle","renderSampleLists","Component","RatingWrapper","ratingSelector_templateObject","RatingSelector","selectedRating","setRating","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","SuperFormGroup","FormGroup","toggleGenre_templateObject","SuperFormControl","FormControl","toggleGenre_templateObject2","SuperFormControlLabel","_templateObject3","ToggleGenre","jones","movieGenres","genres","peep","Checkbox","selectedGenres","includes","toString","toggleGenre","console","log","component","renderFormGroup","PickerWrapper","toggleMaster_templateObject","App","setGenre","event","toggleBy","currentTarget","newGenres","filter","g","push","updateSelections","newRating","ratingSelector","ListCaptain","List","allmovies_templateObject","AllMovies","movies","movie","genreNames","genre_ids","find","genre","ListItem","alignItems","ListItemAvatar","Avatar","src","backdrop_path","ListItemText","primary","title","secondary","join","RecommendedWrapper","randomSelect_templateObject","SuperFab","Fab","randomSelect_templateObject2","randomSelect_templateObject3","RecommendedMovie","_templateObject4","ImageContainer","_templateObject5","posterPath","RecommendedInfo","_templateObject6","SuperButton","Button","_templateObject7","RandomSelect","filteredMovies","newMovie","Math","floor","random","length","recommendedMovie","_this$state","tmdbURL","concat","Link","href","rel","target","randomSelect_DialogContent","poster_path","release_date","overview","theme","createMuiTheme","palette","main","contrastText","typography","fontFamily","useNextVariants","AppContainer","moviepicker_templateObject","CenterFlex","moviepicker_templateObject2","LoadingText","moviepicker_templateObject3","MovieListWrapper","moviepicker_templateObject4","MoviePicker","bind","assertThisInitialized","listDescription","isLoaded","seenBy","_loadMovies","totalMovies","baseURL","process","flexURL","resolved","fetch","response","json","description","results","page","total_pages","alert","_context2","t0","vote_average","every","parseInt","_this2","MuiThemeProvider","topBar","Grid","container","item","xs","toggleMaster","filterDaMovies","allmovies","randomSelect","CircularProgress","React","Boolean","window","location","hostname","match","ReactDOM","render","moviepicker","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12e70270.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport {\n  AppBar,\n  Dialog,\n  DialogTitle,\n  FormControlLabel,\n  IconButton,\n  Radio,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\"\nimport Edit from \"@material-ui/icons/Edit\"\n\nconst defaultLists = [\n  {\n    id: \"43\",\n    name: \"AFI's 100 Most Thrilling American Films\",\n  },\n  {\n    id: \"338\",\n    name: \"Disney Classic Collection\",\n  },\n  {\n    id: \"932\",\n    name: \"Girls With Guns\",\n  },\n  {\n    id: \"2469\",\n    name: \"Best Picture Winners - The Golden Globes\",\n  },\n  {\n    id: \"3321\",\n    name: \"Anime Movies\",\n  },\n  {\n    id: \"3945\",\n    name: \"Good Science Fiction Flicks\",\n  },\n  {\n    id: \"108073\",\n    name: \"Rocky's Recommended Movies\",\n  },\n  {\n    id: \"108351\",\n    name: \"Rocky's To Watch List\",\n  },\n]\n\nconst AppTitle = styled(Typography)`\n  flex-grow: 1;\n`\nconst DialogContent = styled.div`\n  min-width: 500px;\n  display: flex;\n  flex-direction: column;\n  padding: 0 24px 24px 24px;\n`\n\nclass TopBar extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      modalOpen: false,\n      defaultLists: defaultLists,\n    }\n  }\n\n  async componentDidMount() {\n    //TODO: pull default lists from accountId\n    /*const accountId = \"trpglobokar\"\n    const baseURL = `https://api.themoviedb.org/4/account/${accountId}/lists?api_key=${API_KEY}`\n    let response = await fetch(baseURL)\n    let json = await response.json()\n    console.log(\"json\", json)*/\n  }\n\n  handleClick = _event => {\n    this.setState({\n      modalOpen: true,\n    })\n  }\n\n  handleClose = _event => {\n    this.setState({\n      modalOpen: false,\n    })\n  }\n\n  renderSampleLists() {\n    const { editListId, listId } = this.props\n    const { defaultLists } = this.state\n\n    return defaultLists.map(list => {\n      return (\n        <FormControlLabel\n          key={list.id}\n          control={\n            <Radio\n              checked={listId === list.id}\n              onChange={editListId}\n              value={list.id}\n            />\n          }\n          label={list.name}\n        />\n      )\n    })\n  }\n\n  render() {\n    const { modalOpen } = this.state\n\n    return (\n      <AppBar position=\"static\" color=\"secondary\">\n        <Toolbar>\n          <AppTitle variant=\"h6\" color=\"inherit\">\n            Movie Picker\n          </AppTitle>\n          <Typography variant=\"h6\" color=\"inherit\">\n            {this.props.listName}\n          </Typography>\n          <IconButton\n            aria-label=\"EditList\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={this.handleClick}\n            color=\"inherit\"\n          >\n            <Edit />\n          </IconButton>\n        </Toolbar>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={modalOpen}\n        >\n          <DialogTitle id=\"simple-dialog-title\">Change Movie List</DialogTitle>\n          <DialogContent>{this.renderSampleLists()}</DialogContent>\n        </Dialog>\n      </AppBar>\n    )\n  }\n}\n\nexport default TopBar\n","import React, { Component } from \"react\"\nimport { Slider, Typography } from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nconst RatingWrapper = styled.div`\n  margin-bottom: 32px;\n`\n\nclass RatingSelector extends Component {\n  //TODO: figure out how to make range; possible custom component? IDEK\n  render() {\n    const { selectedRating, setRating } = this.props\n    return (\n      <RatingWrapper>\n        <Typography variant=\"h6\">\n          Minimum Rating: {selectedRating}/10\n        </Typography>\n        <br />\n        <Slider\n          defaultValue={selectedRating}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          onChange={(_event, value) => {\n            setRating(value)\n          }}\n          step={0.5}\n          marks\n          min={1}\n          max={10}\n        />\n      </RatingWrapper>\n    )\n  }\n}\n\nexport default RatingSelector\n","import React, { Component } from 'react'\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Typography } from '@material-ui/core'\n\nimport movieGenres from '../static/movieGenres.json';\n\nimport styled from \"styled-components\"\n\nconst SuperFormGroup = styled(FormGroup)`\n  flex-direction: row!important;\n`\nconst SuperFormControl = styled(FormControl)`\n  width: 100%;\n`\nconst SuperFormControlLabel = styled(FormControlLabel)`\n  min-width: 160px;\n`\n\nclass ToggleGenre extends Component {\n\n  renderFormGroup(){\n    const peepsInvolved = movieGenres.genres\n    const jones = peepsInvolved.map(peep => {\n      return (\n        <SuperFormControlLabel\n          key={peep.id}\n          control={\n            <Checkbox\n              checked={this.props.selectedGenres.includes(peep.id.toString())}\n              onChange={this.props.toggleGenre}\n              value={peep.id.toString()}\n\n            />\n          }\n          label={peep.name}\n        />\n      )\n    })\n\n    return (\n      <SuperFormGroup>\n        {jones}\n      </SuperFormGroup>\n    )\n  }\n\n  render() {\n    console.log(\"this.props\", this.props)\n    return (\n      <div>\n        <SuperFormControl component=\"fieldset\">\n          <Typography variant=\"h6\">Genres</Typography>\n          {this.renderFormGroup()}\n        </SuperFormControl>\n      </div>\n    )\n  }\n}\n\nexport default ToggleGenre\n","import React, { Component } from \"react\"\nimport RatingSelector from \"./ratingSelector\"\n//import ToggleSeenBy from \"./pickers/toggleSeenBy\"\nimport ToggleGenre from \"./toggleGenre\"\nimport styled from \"styled-components\"\n\nconst PickerWrapper = styled.div`\n  height: calc(100vh - 96px);\n  overflow: scroll;\n  background-color: white;\n  box-shadow: 0px 0px 20px #00000057;\n  padding: 16px;\n`\n\nclass App extends Component {\n\n  componentDidMount() {\n  }\n\n  /*toggleSeenBy = event => {\n    const toggleBy = event.currentTarget.value\n\n    let currentSeenBy = this.state.seenBy\n\n    if (currentSeenBy.includes(toggleBy)) {\n      currentSeenBy = currentSeenBy.filter(csb => csb !== toggleBy)\n    } else {\n      currentSeenBy.push(toggleBy)\n    }\n\n    let filteredMovies = this.state.movies.filter(movie =>\n      currentSeenBy.includes(movie.seenBy)\n    )\n\n    this.setState({ seenBy: currentSeenBy, filteredMovies: filteredMovies })\n  }*/\n\n  setGenre = event => {\n    const toggleBy = event.currentTarget.value\n\n    let newGenres = this.props.selectedGenres\n    if (newGenres.includes(toggleBy)) {\n      newGenres = newGenres.filter(g => g !== toggleBy)\n    } else {\n      newGenres.push(toggleBy)\n    }\n\n    this.props.updateSelections(\n      newGenres,\n      this.props.selectedRating\n    )\n  }\n\n  setRating = newRating => {\n    this.props.updateSelections(\n      this.props.selectedGenres,\n      newRating\n    )\n  }\n\n  render() {\n    return (\n      <PickerWrapper>\n        {/*<ToggleSeenBy\n          seenBy={this.state.seenBy}\n          toggleSeenBy={this.toggleSeenBy}\n        />*/}\n        <RatingSelector\n          selectedRating={this.props.selectedRating}\n          setRating={this.setRating}\n        />\n        <ToggleGenre\n          selectedGenres={this.props.selectedGenres}\n          toggleGenre={this.setGenre}\n          />\n      </PickerWrapper>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from \"react\"\nimport {\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from \"@material-ui/core\"\nimport styled from \"styled-components\"\n\nimport movieGenres from \"../static/movieGenres.json\"\n\nconst ListCaptain = styled(List)`\n  height: 100%;\n  overflow: scroll;\n`\n\nclass AllMovies extends Component {\n  render() {\n    return (\n      <ListCaptain>\n        {this.props.movies.map(movie => {\n          const genreIDs = movie.genre_ids\n          const genreNames = genreIDs.map(\n            id => movieGenres.genres.find(genre => genre.id === id).name\n          )\n\n          return (\n            <ListItem key={movie.id} alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar\n                  src={\n                    \"https://image.tmdb.org/t/p/w92/\" +\n                    movie.backdrop_path\n                  }\n                />\n              </ListItemAvatar>\n              <ListItemText\n                primary={movie.title}\n                secondary={genreNames.join(\", \")}\n              />\n            </ListItem>\n          )\n        })}\n      </ListCaptain>\n    )\n  }\n}\n\nexport default AllMovies\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport {\n  Button,\n  Dialog,\n  DialogTitle,\n  Fab,\n  Link,\n  Typography,\n} from \"@material-ui/core\"\nimport movieGenres from \"../static/movieGenres.json\"\n\nconst RecommendedWrapper = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n`\nconst SuperFab = styled(Fab)`\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n`\nconst DialogContent = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 0 24px 24px 24px;\n`\nconst RecommendedMovie = styled.div`\n  display: flex;\n  margin-bottom: 8px;\n`\nconst ImageContainer = styled.div`\n  height: 300px;\n  width: 220px;\n  background-image: url(https://image.tmdb.org/t/p/w370_and_h556_bestv2${props => props.posterPath});\n  background-position: top;\n  background-repeat: no-repeat;\n  background-size: contain;\n  margin-right: 16px;\n`\nconst RecommendedInfo = styled.div`\n  width: 75%;\n`\nconst SuperButton = styled(Button)`\n  margin: 8px;\n`\n\nclass RandomSelect extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recommendedMovie: {\n        id: \"\",\n        genre_ids: [],\n      },\n      modalOpen: false,\n    }\n  }\n\n  handleClick = _event => {\n    let movies = this.props.filteredMovies\n\n    const newMovie =\n      movies[Math.floor(Math.random() * Math.floor(movies.length))]\n\n    this.setState({\n      recommendedMovie: newMovie,\n      modalOpen: true,\n    })\n  }\n\n  handleClose = _event => {\n    this.setState({\n      recommendedMovie: {\n        id: \"\",\n        genre_ids: [],\n      },\n      modalOpen: false,\n    })\n  }\n\n  render() {\n    const { modalOpen, recommendedMovie } = this.state\n    const tmdbURL = `https://www.themoviedb.org/movie/${recommendedMovie.id}`\n    const genreNames = recommendedMovie.genre_ids\n      .map(id => movieGenres.genres.find(genre => genre.id === id).name)\n      .join(\", \")\n    console.log(\"recommendedMovie\", recommendedMovie)\n\n    return (\n      <RecommendedWrapper>\n        <SuperFab\n          color=\"primary\"\n          variant=\"extended\"\n          aria-label=\"Choose for Me\"\n          onClick={this.handleClick}\n        >\n          Choose for Me\n        </SuperFab>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={modalOpen}\n        >\n          <DialogTitle id=\"simple-dialog-title\">\n            Recommended Movie:{\" \"}\n            <Link href={tmdbURL} rel=\"noopener noreferrer\" target=\"_blank\">\n              {recommendedMovie.title}\n            </Link>\n          </DialogTitle>\n          <DialogContent>\n            <RecommendedMovie>\n              <ImageContainer posterPath={recommendedMovie.poster_path} />\n              <RecommendedInfo>\n                <Typography>\n                  <b>Release Date:</b> {recommendedMovie.release_date}\n                </Typography>\n                <Typography>\n                  <b>Genres:</b> {genreNames}\n                </Typography>\n                <Typography>\n                  <b>Description:</b> {recommendedMovie.overview}\n                </Typography>\n              </RecommendedInfo>\n            </RecommendedMovie>\n            <SuperButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClick}\n            >\n              Give me another\n            </SuperButton>\n          </DialogContent>\n        </Dialog>\n      </RecommendedWrapper>\n    )\n  }\n}\n\nexport default RandomSelect\n","import React from \"react\"\nimport { CircularProgress, Grid, Typography } from \"@material-ui/core\"\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"\nimport styled from \"styled-components\"\n\nimport TopBar from \"./renders/topBar\"\nimport ToggleMaster from \"./pickers/toggleMaster\"\nimport AllMovies from \"./renders/allmovies\"\nimport RandomSelect from \"./renders/randomSelect\"\n\nimport \"./static/fonts.css\"\n\nconst TMDB_API_KEY = process.env.REACT_APP_TMDB_API_KEY\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#23B5D3\", contrastText: \"#FBFBFB\" }, // Purple and green play nicely together.\n    secondary: { main: \"#071013\", contrastText: \"#FBFBFB\" }, // This is just green.A700 as hex.\n  },\n  typography: {\n    fontFamily: [\n      \"Khand\",\n      \"Raleway\",\n      \"typeface-roboto\",\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    useNextVariants: true,\n  },\n})\n\nconst AppContainer = styled.div`\n  height: 100%;\n`\nconst CenterFlex = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst LoadingText = styled(Typography)`\n  margin-right: 16px !important;\n`\nconst MovieListWrapper = styled.div`\n  margin: 16px 32px 0 32px;\n  max-height: calc(100vh - 96px);\n  overflow: scroll;\n`\n\nclass MoviePicker extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.editListId = this.editListId.bind(this)\n\n    this.state = {\n      listId: \"108073\",\n      listName: \"\",\n      listDescription: \"\",\n      isLoaded: false,\n      recommendedMovie: \"\",\n      seenBy: [\"Jake\", \"Rocky\"],\n      selectedGenres: [],\n      selectedRating: 1,\n      movies: [],\n      filteredMovies: [],\n    }\n  }\n\n  async componentDidMount() {\n    const { listId } = this.state\n    this._loadMovies(listId)\n  }\n\n  async _loadMovies(listId) {\n    let totalMovies = []\n    const baseURL = `https://api.themoviedb.org/4/list/${listId}?api_key=${TMDB_API_KEY}&language=en-US`\n    let flexURL = baseURL\n    let resolved = false\n    let listDescription = \"\"\n    let listName = \"\"\n\n    try {\n      while (!resolved) {\n        let response = await fetch(flexURL)\n        let json = await response.json()\n        listDescription = json.description\n        listName = json.name\n        totalMovies = totalMovies.concat(json.results)\n        if (json.page < json.total_pages) {\n          flexURL = `${baseURL}&page=${json.page + 1}`\n        } else {\n          resolved = true\n        }\n      }\n    } catch (err) {\n      alert(err) // TypeError: failed to fetch\n    }\n\n    this.setState({\n      isLoaded: true,\n      listDescription,\n      listId,\n      listName,\n      movies: totalMovies,\n      filteredMovies: totalMovies,\n    })\n  }\n\n  async editListId(event) {\n    const listId = event.currentTarget.value\n    this._loadMovies(listId)\n  }\n\n  filterDaMovies(selectedGenres, selectedRating) {\n    const movies = this.state.movies\n      .filter(movie => movie.vote_average > selectedRating)\n      .filter(movie =>\n        selectedGenres.every(genre => movie.genre_ids.includes(parseInt(genre)))\n      )\n    return movies\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <MuiThemeProvider theme={theme}>\n          <CenterFlex>\n            <LoadingText>Loading...</LoadingText>\n            <CircularProgress />\n          </CenterFlex>\n        </MuiThemeProvider>\n      )\n    }\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <AppContainer>\n          <TopBar\n            editListId={this.editListId}\n            listId={this.state.listId}\n            listName={this.state.listName}\n          />\n          <Grid container>\n            <Grid item xs={4}>\n              <ToggleMaster\n                selectedRating={this.state.selectedRating}\n                selectedGenres={this.state.selectedGenres}\n                updateSelections={(selectedGenres, selectedRating) => {\n                  const filteredMovies = this.filterDaMovies(\n                    selectedGenres,\n                    selectedRating\n                  )\n                  this.setState({\n                    selectedGenres,\n                    selectedRating,\n                    filteredMovies,\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={8}>\n              <MovieListWrapper>\n                <AllMovies movies={this.state.filteredMovies} />\n              </MovieListWrapper>\n            </Grid>\n          </Grid>\n          <RandomSelect filteredMovies={this.state.filteredMovies} />\n        </AppContainer>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default MoviePicker\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./static/index.css\"\nimport MoviePicker from \"./moviepicker\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<MoviePicker />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}